name: CI

on:
  push:
    branches:
      - 'master'
    tags: [ 'v*' ]
  pull_request:
    branches:
      - 'master'

jobs:
  test:
    name: 'Test'
    strategy:
      matrix:
        python_version: ['3.5', '3.6', '3.7', '3.8', '3.9', '3.10', 'pypy-3.7']
        os: ['ubuntu', 'macos', 'windows']
      fail-fast: true
    runs-on: ${{ matrix.os }}-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v3
        with:
          submodules: true
      - name: 'Setup Python ${{ matrix.python_version }}'
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python_version }}
      - name: 'Install packaging tools'
        run: python -m pip install -U pip wheel setuptools build twine
      - name: 'Install coverage dependencies'
        run: python -m pip install --upgrade coverage codecov
      - name: 'Install dependencies'
        run: python -m pip install -r requirements.txt
      - name: 'Run doctests'
        run: coverage run -m doctest README.md
      - name: 'Install tests dependencies'
        run: python -m pip install -r requirements-tests.txt
      - name: 'Run tests'
        run: coverage run --append -m pytest
      - name: 'Collect coverage'
        run: coverage xml
      - name: 'Upload coverage'
        uses: codecov/codecov-action@v2.1.0

  pre-deploy:
    name: 'Pre-deploy'
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    steps:
      - name: '_'
        run: echo "Predeploy step"

  build-sdist:
    name: 'Build sdist'
    runs-on: ubuntu-latest
    needs: pre-deploy
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v3
        with:
          submodules: true
      - name: 'Setup Python'
        uses: actions/setup-python@v3
      - name: 'Install packaging tools'
        run: python -m pip install -U pip wheel setuptools build twine
      - name: 'Install dependencies'
        run: python -m pip install -r requirements.txt
      - name: 'Build sdist'
        run: python -m build --sdist
      - name: 'Upload sdist'
        uses: actions/upload-artifact@v2
        with:
          name: dist
          path: dist

  build-wheels:
    name: 'Build wheels'
    runs-on: ${{ matrix.os }}-latest
    needs: pre-deploy
    strategy:
      matrix:
        os: ['ubuntu', 'windows', 'macos']
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v3
        with:
          submodules: true
      - name: 'Setup Python'
        uses: actions/setup-python@v3
      - name: 'Install packaging tools'
        run: python -m pip install -U pip wheel setuptools build twine
      - name: 'Set cibuildwheel configurations'
        run: |
          cat >> pyproject.toml << EOF
          [tool.cibuildwheel]
          test-command = ""
          # don't build PyPy wheels, install from source instead
          skip = "pp*"
          EOF
        shell: bash
      - name: 'Build wheels'
        uses: pypa/cibuildwheel@v2.3.1
        env:
          CIBW_ARCHS_MACOS: x86_64 arm64 universal2
      - name: 'Upload wheels'
        uses: actions/upload-artifact@v2
        with:
          name: dist
          path: ./wheelhouse/*.whl

  deploy:
    name: 'Deploy'
    environment: release
    needs: ['build-sdist', 'build-wheels']
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v3
        with:
          submodules: true
      - name: 'Install packaging tools'
        run: python -m pip install -U pip wheel setuptools build twine
      - name: 'Download distributions'
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist
      - name: 'Collected dists'
        run: tree dist
      - name: 'PyPI upload'
        uses: pypa/gh-action-pypi-publish@v1.5.0
        with:
          packages_dir: dist
          password: ${{ secrets.PYPI_API_TOKEN }}
